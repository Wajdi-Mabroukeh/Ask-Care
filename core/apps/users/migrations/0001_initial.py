# Generated by Django 3.0.5 on 2022-12-25 14:59

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name=[])),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name=[])),
                ('email', models.EmailField(max_length=225, unique=True, verbose_name='email address')),
                ('username', models.CharField(max_length=225, unique=True, verbose_name='username')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other')], max_length=10, null=True, verbose_name='gender')),
                ('mobile', models.CharField(max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='mobile')),
                ('city', models.CharField(max_length=100, null=True, verbose_name='location')),
                ('birthdate', models.DateField(null=True, verbose_name='birth date')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_patient', models.BooleanField(default=False, verbose_name='is patient')),
                ('is_specialist', models.BooleanField(default=False, verbose_name='is specialist')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChronicIllness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='chronic illness name')),
            ],
        ),
        migrations.CreateModel(
            name='Symptoms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='symptoms name')),
            ],
        ),
        migrations.CreateModel(
            name='UserMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name=[])),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name=[])),
                ('profile_img', models.ImageField(null=True, upload_to='media/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpecialistProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name=[])),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name=[])),
                ('type', models.CharField(choices=[('BABY_CARE', 'Baby Care'), ('ELDERLY_CARE', 'Elderly Care'), ('DOCTOR', 'Doctor'), ('NURSE', 'Nurse'), ('PHYSICIAN', 'Physician')], max_length=50, verbose_name='type')),
                ('hour_cost', models.PositiveIntegerField(null=True, verbose_name='specialist hour cost')),
                ('daily_open_from', models.TimeField(null=True, verbose_name='open from')),
                ('daily_open_to', models.TimeField(null=True, verbose_name='open_to')),
                ('top_degree', models.CharField(choices=[('PROFESSIONAL_CERTIFICATE', 'Professional Certificate'), ('UNDERGRADUATE_DEGREE', 'Undergraduate Degree'), ('TRANSFER_DEGREE', 'Transfer Degree'), ('ASSOCIATE_DEGREE', 'Associate Degree'), ('BACHELOR_DEGREE', 'Bachelor Degree'), ('MASTER_DEGREE', 'Master Degree'), ('DOCTORAL_DEGREE', 'Doctoral Degree'), ('PROFESSIONAL_DEGREE', 'Professional Degree'), ('SPECIALIST_DEGREE', 'Specialist Degree')], max_length=100, null=True, verbose_name='top degree')),
                ('examination_avg_period', models.PositiveIntegerField(default=15, verbose_name='examination avg time')),
                ('job_title', models.CharField(blank=True, max_length=225, verbose_name='job')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='specialists', related_query_name='specialist', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PatientProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name=[])),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name=[])),
                ('blood_type', models.CharField(choices=[('A+', 'A Rhd Positive'), ('A-', 'A Rhd Negative'), ('B+', 'B Rhd Positive'), ('B-', 'B Rhd Negative'), ('O+', 'O Rhd Positive'), ('O-', 'O Rhd Negative'), ('AB+', 'Ab Rhd Positive'), ('AB-', 'Ab Rhd Negative')], max_length=10, null=True, verbose_name='blood type')),
                ('have_allergies', models.BooleanField(default=False, verbose_name='have allergies')),
                ('chronic_illness', models.ManyToManyField(to='users.ChronicIllness')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='patients', related_query_name='patient', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='avatar',
            field=models.OneToOneField(blank=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='user', related_query_name='user', to='users.UserMedia'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name=[])),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name=[])),
                ('time', models.DateTimeField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.PatientProfile')),
                ('specialist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.SpecialistProfile')),
            ],
            options={
                'unique_together': {('specialist', 'patient', 'time')},
            },
        ),
    ]
